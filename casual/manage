<!-- /*
 * SCHOOL SUBSTITUTE MANAGEMENT SYSTEM
 * 
 * DATA ARCHITECTURE:
 * ==================
 * 
 * Data is now split into separate, focused components:
 * 1. DutyRosterData.js - Playground duty roster and parsing functions
 * 2. RFFRosterData.js - RFF timetable and specialist activities  
 * 3. RFFPaybackData.js - RFF payback tracking and priority management
 * 
 * Each component:
 * - Contains raw spreadsheet data in 2D array format
 * - Provides helper functions for parsing and querying
 * - Can be easily updated by replacing the raw data arrays
 * - Future: Will have CSV upload functionality to replace arrays
 * 
 * BENEFITS:
 * - Separation of concerns (each roster is independent)
 * - Easy maintenance (update one file without affecting others)
 * - Better for version control (targeted changes)
 * - Reusable across different parts of the application
 */

import React, { useState } from 'react';
import { Search, Upload, Calendar, Users, Clock } from 'lucide-react';

// Import data components (in real app, these would be separate files)
// For demo purposes, including inline - but structure shows the separation

// DUTY ROSTER DATA COMPONENT
const DutyRosterData = {
  rawData: [
    ['Duty Area', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
    ['C St gate', 'Lisa', 'Lisa', 'Lisa', 'Tanya', 'Katherine/Tanya'],
    ['W St gate', 'Susan', 'Susan', 'Susan', 'Susan', 'Tarsh'],
    ['Lines K-2', 'Katherine', 'Katherine', 'Katherine', 'Kindy Team', 'Katherine'],
    ['Lines 1-2', 'Tanya', 'Tanya', 'Tarsh', 'Tarsh', 'Tarsh'],
    ['Lines 3-6', 'Liz W', 'Rachel', 'Kati H', 'Jeanette', 'Jeanette'],
    ['A (3-6)', 'Alice', 'Clair S', 'Claire D', 'Aleta', 'Katie'],
    ['B (3-6)', 'Chelsea', 'Aliy', 'Holly', 'Dane', 'Alice'],
    ['C (Kindy)', 'Liz C', 'Katherine', 'Narelle', 'Bronwyn', 'Veronica'],
    ['D (Y1-2)', 'Giuseppe', 'Giuseppe', 'Giuseppe', 'Giuseppe', 'Aliy'],
    ['A (3-5)', 'Gabrielle', 'Katie', 'Anna', 'Gemma', 'Holly'],
    ['B (3-6)', 'Katie', 'Michael', 'Jen B', 'Fiona', 'Sarah S'],
    ['C (K) - Equip', 'Sophie', 'Helen', 'Nikki', 'Maz', 'Liz C'],
    ['C (K) - Multi', 'Narelle', 'Veronica', 'Katherine', 'Nikki', 'Sophie'],
    ['D (Y1-2)', 'Jen Y', 'Tarsh', 'Sarah O', 'Jen B', 'Renee'],
    ['Garden (3-5)', 'Aliy', 'Elise', 'Kylie', 'Kylie', 'Aleta'],
    ['E (Year 6)', 'Jed', 'Gabrielle', 'Kati H', 'Clair S', 'Kati H'],
    ['A (3-5)', 'Karen R', 'Gemma', 'Chelsea', 'Christine', 'Penny'],
    ['B (3-5)', 'Aleta', 'Christina', 'Renee', 'Liz W', 'Gemma'],
    ['Matt', 'Dane', 'Clair S', 'Jed', 'Rachel', 'Matt W1 only'],
    ['C (K) - Equip', 'Bronwyn', 'Sarah O', 'Elise', 'Sophie', 'Bronwyn'],
    ['C (K) - Multi', 'Claire D', 'Bronwyn', 'Liz C', 'Helen', 'Karen R'],
    ['D (Y1-2)', 'Sarah O', 'Belinda', 'Aliy', 'Tarsh', 'Helen'],
    ['Garden (3-5)', 'Daana', 'Daana', 'Katie N', 'Katie', 'Elise'],
    ['E (Year 6)', 'Holly', 'Holly', 'Matt', 'Anna', 'Rachel W1 only'],
    ['Library', 'Sarah S', 'Sarah S week 1', 'Sarah S', 'Sarah S', 'CLOSED'],
    ['W St gate', 'Priscilla', 'Priscilla', 'Priscilla', 'Priscilla', 'Priscilla'],
    ['Bus St gate', 'Tanya', 'Christine', 'Tanya', 'Karen R', 'Liz W']
  ],
  
  timePeriods: {
    recess: { start: 3, end: 9, time: 'Recess (11:10-11:35)' },
    lunch1st: { start: 10, end: 16, time: 'Lunch 1st half (1:05-1:25)' },
    lunch2nd: { start: 17, end: 25, time: 'Lunch 2nd half (1:25-1:45)' },
    afterSchool: { start: 26, end: 27, time: 'After School (3:05)' }
  },
  
  findDutiesForTeacher: function(teacherName, dayOfWeek) {
    const duties = [];
    const dayIndex = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].indexOf(dayOfWeek) + 1;
    
    if (dayIndex === 0) return duties;
    
    this.rawData.slice(1).forEach((row, index) => {
      const area = row[0];
      const assignedTeacher = row[dayIndex];
      
      if (assignedTeacher && (assignedTeacher === teacherName || assignedTeacher.includes(teacherName))) {
        let timePeriod = 'Unknown';
        const rowNum = index + 1;
        
        Object.values(this.timePeriods).forEach(period => {
          if (rowNum >= period.start && rowNum <= period.end) {
            timePeriod = period.time;
          }
        });
        
        duties.push({ timeSlot: timePeriod, area: area });
      }
    });
    
    return duties;
  }
};

// RFF ROSTER DATA COMPONENT
const RFFRosterData = {
  rawData: [
    ['Time', 'Alice', 'James', 'Maz', 'Christine', 'Karen', 'Savanah', 'Glenda', 'Alice', 'James', 'Christine', 'Karen'],
    ['', 'Music', 'Sport', 'Sport', 'Library', 'Library', 'Exec', 'Exec', 'Music', 'Sport', 'Library', 'Library'],
    ['9:10 - 9:50', '4W', 'ECT', '3E', 'RFF', 'RFF', '1S (ICT)', 'RFF', '4C', 'RFF', '', ''],
    ['9:50 - 10:30', '6W', '2H', '1A', '2E', '1S', 'KB', 'RFF', 'KN', '', '', ''],
    ['10:30 - 11:10', '3C', '2E', '1S', '2H', '1A', 'KN', 'Sport Set Up', 'KB', '', '', ''],
    ['11:35 - 12:15', '6H', '2Y', '1D', '2B', '1O', 'KV', 'KS', '', '', '', ''],
    ['12:15 - 12:55', '3N', '2B', '1O', '2Y', '1D', 'KS', 'KV', '', '', '', ''],
    ['1:45 - 2:25', '3W', '2D', '1MS', '4I', 'ECT#', 'KK', 'KE', '', '', '', ''],
    ['2:25 - 3:05', '4I', 'Christina', '1G!', '2D', '5H', 'KE', 'RFF', 'KK', '', '', '']
  ],
  
  findRFFForTeacher: function(teacherName, dayOfWeek = 'Monday') {
    const rffSlots = [];
    
    if (this.rawData.length < 3) return rffSlots;
    
    const teacherColumns = [];
    this.rawData[0].forEach((teacher, index) => {
      if (teacher === teacherName) {
        teacherColumns.push(index);
      }
    });
    
    if (teacherColumns.length === 0) return rffSlots;
    
    this.rawData.slice(2).forEach(row => {
      const timeSlot = row[0];
      if (timeSlot && timeSlot.includes('-')) {
        teacherColumns.forEach(colIndex => {
          const assignment = row[colIndex];
          if (assignment && assignment !== '' && assignment !== 'RFF') {
            const activity = this.rawData[1][colIndex] || 'Unknown';
            
            rffSlots.push({
              timeSlot: timeSlot,
              activity: activity,
              class: assignment,
              teacher: teacherName
            });
          }
        });
      }
    });
    
    return rffSlots;
  }
};

// RFF PAYBACK DATA COMPONENT  
const RFFPaybackData = {
  rawData: [
    ['Teacher', 'Slots Owed', 'Priority', 'Notes'],
    ['Christine', '2', '1', 'ECT time coverage'],
    ['Karen', '1', '2', 'ICT coordinator time'],
    ['Alice', '1', '3', 'General coverage'],
    ['James', '1', '4', 'Sport coverage when no PSSA'],
    ['Holly', '2', '5', 'ECT time - even weeks only']
  ],
  
  getPaybackList: function() {
    return this.rawData.slice(1).map(row => ({
      teacher: row[0],
      slotsOwed: parseInt(row[1]) || 0,
      priority: parseInt(row[2]) || 999,
      notes: row[3] || ''
    })).sort((a, b) => a.priority - b.priority);
  },
  
  getHighestPriority: function() {
    const list = this.getPaybackList();
    return list.length > 0 ? list[0] : null;
  }
};          {/* Right Panel - Schedule Display */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow-sm border p-6">
              {selectedTeacher ? (
                <div>
                  <div className="flex items-center justify-between mb-6">
                    <h2 className="text-xl font-semibold text-gray-900">
                      Substitute Schedule for {selectedTeacher}
                    </h2>
                    <div className="text-sm text-gray-600">
                      {new Date(selectedDate).toLocaleDateString('en-AU', {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </div>
                  </div>

                  {/* Schedule Display */}
                  {schedule ? (
                    <div className="space-y-6">
                      {/* Summary Cards */}
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                          <div className="flex items-center space-x-2 mb-2">
                            <div className="bg-red-500 w-3 h-3 rounded-full"></div>
                            <h3 className="font-semibold text-red-800">Duties</h3>
                          </div>
                          <p className="text-red-700 text-sm">
                            {schedule.duties.length} assigned duties
                          </p>
                        </div>
                        
                        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                          <div className="flex items-center space-x-2 mb-2">
                            <div className="bg-blue-500 w-3 h-3 rounded-full"></div>
                            <h3 className="font-semibold text-blue-800">RFF Periods</h3>
                          </div>
                          <p className="text-blue-700 text-sm">
                            {schedule.rffSlots.length} RFF slots
                          </p>
                        </div>
                        
                        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                          <div className="flex items-center space-x-2 mb-2">
                            <div className="bg-green-500 w-3 h-3 rounded-full"></div>
                            <h3 className="font-semibold text-green-800">RFF Payback</h3>
                          </div>
                          <p className="text-green-700 text-sm">
                            {schedule.paybackInfo ? `Priority: ${schedule.paybackInfo.teacher}` : 'No payback due'}
                          </p>
                        </div>
                      </div>

                      {/* Detailed Timeline */}
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900 mb-4">Daily Timeline</h3>
                        <div className="space-y-3">
                          {schedule.timeline.map((item, index) => (
                            <div
                              key={index}
                              className={`flex items-start space-x-4 p-4 rounded-lg border ${
                                item.priority === 'high' 
                                  ? 'bg-red-50 border-red-200' 
                                  : item.priority === 'medium'
                                  ? 'bg-blue-50 border-blue-200'
                                  : 'bg-gray-50 border-gray-200'
                              }`}
                            >
                              <div className="flex-shrink-0">
                                <div className={`w-4 h-4 rounded-full ${
                                  item.priority === 'high' 
                                    ? 'bg-red-500' 
                                    : item.priority === 'medium'
                                    ? 'bg-blue-500'
                                    : 'bg-gray-400'
                                }`}></div>
                              </div>
                              <div className="flex-grow">
                                <div className="flex items-center justify-between mb-1">
                                  <h4 className="font-medium text-gray-900">{item.time}</h4>
                                  <span className={`px-2 py-1 text-xs rounded-full ${
                                    item.type === 'duty' 
                                      ? 'bg-red-100 text-red-800' 
                                      : item.type === 'rff'
                                      ? 'bg-blue-100 text-blue-800'
                                      : 'bg-gray-100 text-gray-800'
                                  }`}>
                                    {item.type.toUpperCase()}
                                  </span>
                                </div>
                                <p className="font-medium text-gray-800 mb-1">{item.activity}</p>
                                <p className="text-sm text-gray-600">{item.instruction}</p>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Print Button */}
                      <div className="flex justify-end pt-4 border-t">
                        <button
                          onClick={() => window.print()}
                          className="px-6 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-900 transition-colors"
                        >
                          Print Schedule
                        </button>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <div className="flex items-center space-x-2">
                          <div className="bg-yellow-400 w-3 h-3 rounded-full"></div>
                          <h3 className="font-semibold text-yellow-800">Schedule Generation</h3>
                        </div>
                        <p className="text-yellow-700 mt-2">
                          Click "Generate Substitute Schedule" to create the detailed schedule.
                          This will include:
                        </p>
                        <ul className="list-disc list-inside text-yellow-700 mt-2 space-y-1 text-sm">
                          <li>Regular duties assigned to {selectedTeacher}</li>
                          <li>RFF periods and class coverage</li>
                          <li>RFF payback priorities</li>
                          <li>Complete daily timeline</li>
                        </ul>
                      </div>

                      {/* Preview of what the schedule will look like */}
                      <div className="border-2 border-dashed border-gray-200 rounded-lg p-8 text-center text-gray-500">
                        <Calendar className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                        <p className="text-lg font-medium mb-2">Schedule Preview</p>
                        <p className="text-sm">
                          Detailed substitute schedule will appear here after generation
                        </p>
                      </div>
                    </div>
                  )}
                </div>/*
 * SCHOOL SUBSTITUTE MANAGEMENT SYSTEM
 * 
 * DATA STRUCTURE OVERVIEW:
 * ========================
 * 
 * 1. rawDutyRoster: 2D array matching playground roster spreadsheet
 *    - Row 0: Headers ['Duty Area', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
 *    - Subsequent rows: [Area, Mon Teacher, Tue Teacher, Wed Teacher, Thu Teacher, Fri Teacher]
 *    - Easily replaceable by CSV upload maintaining same structure
 * 
 * 2. rawRFFRoster: 2D array matching RFF roster spreadsheet  
 *    - Row 0: Teacher names across columns
 *    - Row 1: Activity types (Music, Sport, Library, etc.)
 *    - Subsequent rows: [Time Slot, Class assignments per teacher]
 *    - Easily replaceable by CSV upload maintaining same structure
 * 
 * 3. rawRFFPayback: 2D array for RFF payback tracking
 *    - Row 0: Headers ['Teacher', 'Slots Owed', 'Priority', 'Notes'] 
 *    - Subsequent rows: Teacher payback data
 *    - Easily replaceable by CSV upload maintaining same structure
 * 
 * TO UPDATE DATA:
 * ===============
 * 1. Export your spreadsheets as CSV
 * 2. Replace the raw data arrays below with CSV data
 * 3. All parsing logic will automatically work with new data
 * 4. Future: Add CSV upload functionality to replace these arrays
 */

import React, { useState } from 'react';
import { Search, Upload, Calendar, Users, Clock } from 'lucide-react';

// Data Models (TypeScript-like structures as comments)
/*
interface Teacher {
  id: string;
  name: string;
  class: string;
  regularDuties: Duty[];
  rffSlots: RFFSlot[];
}

interface Duty {
  day: string;
  timeSlot: string;
  area: string;
  teacher: string;
}

interface RFFSlot {
  day: string;
  timeSlot: string;
  activity: string; // Music, Sport, Library, Computer, Exec
  class: string;
  teacher: string;
}

interface RFFPayback {
  teacher: string;
  slotsOwed: number;
  priority: number;
}
*/

// Raw Playground Duty Roster - Direct from spreadsheet structure
const rawDutyRoster = [
  ['Duty Area', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
  ['C St gate', 'Lisa', 'Lisa', 'Lisa', 'Tanya', 'Katherine/Tanya'],
  ['W St gate', 'Susan', 'Susan', 'Susan', 'Susan', 'Tarsh'],
  ['Lines K-2', 'Katherine', 'Katherine', 'Katherine', 'Kindy Team', 'Katherine'],
  ['Lines 1-2', 'Tanya', 'Tanya', 'Tarsh', 'Tarsh', 'Tarsh'],
  ['Lines 3-6', 'Liz W', 'Rachel', 'Kati H', 'Jeanette', 'Jeanette'],
  ['A (3-6)', 'Alice', 'Clair S', 'Claire D', 'Aleta', 'Katie'],
  ['B (3-6)', 'Chelsea', 'Aliy', 'Holly', 'Dane', 'Alice'],
  ['C (Kindy)', 'Liz C', 'Katherine', 'Narelle', 'Bronwyn', 'Veronica'],
  ['D (Y1-2)', 'Giuseppe', 'Giuseppe', 'Giuseppe', 'Giuseppe', 'Aliy'],
  // Lunch 1st half section
  ['A (3-5)', 'Gabrielle', 'Katie', 'Anna', 'Gemma', 'Holly'],
  ['B (3-6)', 'Katie', 'Michael', 'Jen B', 'Fiona', 'Sarah S'],
  ['C (K) - Equip', 'Sophie', 'Helen', 'Nikki', 'Maz', 'Liz C'],
  ['C (K) - Multi', 'Narelle', 'Veronica', 'Katherine', 'Nikki', 'Sophie'],
  ['D (Y1-2)', 'Jen Y', 'Tarsh', 'Sarah O', 'Jen B', 'Renee'],
  ['Garden (3-5)', 'Aliy', 'Elise', 'Kylie', 'Kylie', 'Aleta'],
  ['E (Year 6)', 'Jed', 'Gabrielle', 'Kati H', 'Clair S', 'Kati H'],
  // Lunch 2nd half section
  ['A (3-5)', 'Karen R', 'Gemma', 'Chelsea', 'Christine', 'Penny'],
  ['B (3-5)', 'Aleta', 'Christina', 'Renee', 'Liz W', 'Gemma'],
  ['Matt', 'Dane', 'Clair S', 'Jed', 'Rachel', 'Matt W1 only'],
  ['C (K) - Equip', 'Bronwyn', 'Sarah O', 'Elise', 'Sophie', 'Bronwyn'],
  ['C (K) - Multi', 'Claire D', 'Bronwyn', 'Liz C', 'Helen', 'Karen R'],
  ['D (Y1-2)', 'Sarah O', 'Belinda', 'Aliy', 'Tarsh', 'Helen'],
  ['Garden (3-5)', 'Daana', 'Daana', 'Katie N', 'Katie', 'Elise'],
  ['E (Year 6)', 'Holly', 'Holly', 'Matt', 'Anna', 'Rachel W1 only'],
  ['Library', 'Sarah S', 'Sarah S week 1', 'Sarah S', 'Sarah S', 'CLOSED'],
  // After School
  ['W St gate', 'Priscilla', 'Priscilla', 'Priscilla', 'Priscilla', 'Priscilla'],
  ['Bus St gate', 'Tanya', 'Christine', 'Tanya', 'Karen R', 'Liz W']
];

// Raw RFF Roster - Direct from spreadsheet structure  
const rawRFFRoster = [
  ['Time', 'Alice', 'James', 'Maz', 'Christine', 'Karen', 'Savanah', 'Glenda', 'Alice', 'James', 'Christine', 'Karen'],
  ['', 'Music', 'Sport', 'Sport', 'Library', 'Library', 'Exec', 'Exec', 'Music', 'Sport', 'Library', 'Library'],
  ['9.10 - 9.50', '4W', 'ECT', '3E', 'RFF', 'RFF', '1S (ICT)', 'RFF', '4C', 'RFF'],
  ['9.50 - 10.30', '6W', '2H', '1A', '2E', '1S', 'KB', 'RFF', 'KN'],
  ['10.30 - 11.10', '3C', '2E', '1S', '2H', '1A', 'KN', 'Sport Set Up', 'KB'],
  ['11.35 - 12.15', '6H', '2Y', '1D', '2B', '1O', 'KV', 'KS'],
  ['12.15 - 12.55', '3N', '2B', '1O', '2Y', '1D', 'KS', 'KV'],
  ['1.45 - 2.25', '3W', '2D', '1MS', '4I', 'ECT#', 'KK', 'KE'],
  ['2.25 - 3.05', '4I', 'Christina', '1G!', '2D', '5H', 'KE', 'RFF', 'KK']
];

// Raw RFF Payback List
const rawRFFPayback = [
  ['Teacher', 'Slots Owed', 'Priority', 'Notes'],
  ['Christine', '2', '1', 'ECT time coverage'],
  ['Karen', '1', '2', 'ICT coordinator time'],
  ['Alice', '1', '3', 'General coverage'],
  ['James', '1', '4', 'Sport coverage when no PSSA'],
  ['Holly', '2', '5', 'ECT time - even weeks only']
];

const sampleData = {
  teachers: parseTeachersFromRawData(),
  
  dutySlots: [
    'Before School (8:35-9:05)',
    'Recess (11:10-11:35)',
    'Lunch 1st half (1:05-1:25)',
    'Lunch 2nd half (1:25-1:45)',
    'After School (3:05)'
  ],
  
  rffSlots: [
    '9:10-9:50',
    '9:50-10:30', 
    '10:30-11:10',
    '11:35-12:15',
    '12:15-12:55',
    '1:45-2:25',
    '2:25-3:05'
  ],
  
  rffPayback: getRFFPaybackFromRaw()
};

// Parser functions for raw spreadsheet data
const parseTeachersFromRawData = () => {
  const teachers = new Set();
  
  // Extract from duty roster (skip header row)
  rawDutyRoster.slice(1).forEach(row => {
    for (let i = 1; i < row.length; i++) {
      if (row[i] && row[i] !== 'CLOSED' && !row[i].includes('Team')) {
        // Handle combined names like "Katherine/Tanya"
        const names = row[i].split('/');
        names.forEach(name => {
          const cleanName = name.trim().split(' ')[0]; // Take first name only
          if (cleanName && cleanName.length > 1) {
            teachers.add(cleanName);
          }
        });
      }
    }
  });
  
  // Extract from RFF roster
  if (rawRFFRoster.length > 1) {
    rawRFFRoster[0].slice(1).forEach(teacher => {
      if (teacher && teacher !== '') {
        teachers.add(teacher);
      }
    });
  }
  
  // Convert to array with IDs and add sample classes
  return Array.from(teachers).map((name, index) => ({
    id: (index + 1).toString(),
    name: name,
    class: getTeacherClass(name) // We'll need to define or extract this
  }));
};

const getTeacherClass = (teacherName) => {
  // Sample class assignments - in real version this would come from another data source
  const classMap = {
    'Alice': '3W', 'Christine': '4C', 'Daana': '2D', 'Christina': '6H', 
    'Karen': '1S', 'Lisa': 'KS', 'Susan': '2E', 'Katherine': 'KB',
    'Tanya': '2Y', 'Liz W': '5M', 'Rachel': '4D', 'Giuseppe': '1G',
    'Chelsea': '3C', 'Holly': '6L', 'James': 'Sport', 'Maz': '5H'
  };
  return classMap[teacherName] || 'Unknown';
};

const findTeacherDutiesFromRaw = (teacherName, dayOfWeek) => {
  const duties = [];
  const dayIndex = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].indexOf(dayOfWeek) + 1;
  
  if (dayIndex === 0) return duties; // Invalid day
  
  // Define duty time periods based on roster structure
  const dutyPeriods = {
    'BEFORE SCHOOL': 'Before School (8:35-9:05)',
    'RECESS': 'Recess (11:10-11:35)', 
    'LUNCH 1st half': 'Lunch 1st half (1:05-1:25)',
    'LUNCH 2nd half': 'Lunch 2nd half (1:25-1:45)',
    'AFTER SCHOOL': 'After School (3:05)'
  };
  
  // Parse through the raw duty roster
  rawDutyRoster.slice(1).forEach((row, index) => {
    const area = row[0];
    const assignedTeacher = row[dayIndex];
    
    if (assignedTeacher && (assignedTeacher === teacherName || assignedTeacher.includes(teacherName))) {
      // Determine time period based on row position (this is simplified)
      let timePeriod;
      if (index < 10) timePeriod = 'Recess (11:10-11:35)';
      else if (index < 17) timePeriod = 'Lunch 1st half (1:05-1:25)';
      else if (index < 26) timePeriod = 'Lunch 2nd half (1:25-1:45)';
      else timePeriod = 'After School (3:05)';
      
      duties.push({ timeSlot: timePeriod, area: area });
    }
  });
  
  return duties;
};

const findTeacherRFFFromRaw = (teacherName, dayOfWeek) => {
  const rffSlots = [];
  const dayIndex = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].indexOf(dayOfWeek);
  
  if (dayIndex === -1 || rawRFFRoster.length < 3) return rffSlots;
  
  // Find teacher column(s) - teachers can appear multiple times
  const teacherColumns = [];
  rawRFFRoster[0].forEach((teacher, index) => {
    if (teacher === teacherName) {
      teacherColumns.push(index);
    }
  });
  
  if (teacherColumns.length === 0) return rffSlots;
  
  // Parse time slots (starting from row 2, skipping header rows)
  rawRFFRoster.slice(2).forEach(row => {
    const timeSlot = row[0];
    if (timeSlot && timeSlot.includes('-')) {
      teacherColumns.forEach(colIndex => {
        const assignment = row[colIndex];
        if (assignment && assignment !== '' && assignment !== 'RFF') {
          // Get activity type from header row
          const activity = rawRFFRoster[1][colIndex] || 'Unknown';
          
          rffSlots.push({
            timeSlot: timeSlot,
            activity: activity,
            class: assignment,
            teacher: teacherName
          });
        }
      });
    }
  });
  
  return rffSlots;
};

const getRFFPaybackFromRaw = () => {
  return rawRFFPayback.slice(1).map(row => ({
    teacher: row[0],
    slotsOwed: parseInt(row[1]) || 0,
    priority: parseInt(row[2]) || 999,
    notes: row[3] || ''
  })).sort((a, b) => a.priority - b.priority);
};

export default function SchoolSubstituteApp() {
  const [selectedTeacher, setSelectedTeacher] = useState('');
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
  const [schedule, setSchedule] = useState(null);
  // Component is complete - closing brace]);
  const [showDropdown, setShowDropdown] = useState(false);

  const handleTeacherSearch = (teacherName) => {
    setSelectedTeacher(teacherName);
    setSchedule(null); // Reset schedule when teacher changes
    setShowDropdown(false);
  };

  const handleSearchInput = (e) => {
    const value = e.target.value;
    setSelectedTeacher(value);
    setSchedule(null);
    
    if (value.length > 0) {
      const filtered = sampleData.teachers.filter(teacher => 
        teacher.name.toLowerCase().includes(value.toLowerCase()) ||
        teacher.class.toLowerCase().includes(value.toLowerCase())
      );
      setSearchResults(filtered);
      setShowDropdown(true);
    } else {
      setSearchResults([]);
      setShowDropdown(false);
    }
  };

  const generateSchedule = () => {
    if (!selectedTeacher) return;
    
    const date = new Date(selectedDate);
    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    const dayOfWeek = days[date.getDay()];
    
    // Find absent teacher's duties and RFF using raw data parsers
    const teacherDuties = findTeacherDutiesFromRaw(selectedTeacher, dayOfWeek);
    const teacherRFF = findTeacherRFFFromRaw(selectedTeacher, dayOfWeek);
    
    // Get highest priority RFF payback
    const priorityPayback = sampleData.rffPayback[0];
    
    // Generate schedule
    const generatedSchedule = {
      absentTeacher: selectedTeacher,
      date: selectedDate,
      dayOfWeek: dayOfWeek,
      duties: teacherDuties,
      rffSlots: teacherRFF,
      paybackInfo: priorityPayback,
      timeline: generateTimeline(teacherDuties, teacherRFF, priorityPayback)
    };
    
    setSchedule(generatedSchedule);
  };

  const generateTimeline = (duties, rffSlots, payback) => {
    const timeline = [];
    const allSlots = [
      'Before School (8:35-9:05)',
      '9:10-9:50',
      '9:50-10:30',
      '10:30-11:10',
      'Recess (11:10-11:35)',
      '11:35-12:15',
      '12:15-12:55',
      'Lunch 1st half (1:05-1:25)',
      'Lunch 2nd half (1:25-1:45)',
      '1:45-2:25',
      '2:25-3:05',
      'After School (3:05)'
    ];

    allSlots.forEach(slot => {
      const duty = duties.find(d => d.timeSlot === slot);
      const rff = rffSlots.find(r => r.timeSlot === slot);
      
      if (duty) {
        timeline.push({
          time: slot,
          type: 'duty',
          activity: `Duty: ${duty.area}`,
          instruction: `Supervise students at ${duty.area}`,
          priority: 'high'
        });
      } else if (rff) {
        let coverageInfo = '';
        if (rff.activity === 'RFF' && payback) {
          coverageInfo = ` (${payback.teacher} will cover ${rff.class} - RFF payback priority)`;
        }
        
        timeline.push({
          time: slot,
          type: 'rff',
          activity: `${rff.activity}: ${rff.class}${coverageInfo}`,
          instruction: rff.activity === 'RFF' ? 
            `Free period - ${payback ? payback.teacher + ' covers ' + rff.class : 'Class covered by specialist'}` :
            `Take ${rff.class} to ${rff.activity}`,
          priority: 'medium'
        });
      } else if (slot.includes('Recess') || slot.includes('Lunch')) {
        timeline.push({
          time: slot,
          type: 'break',
          activity: slot.split('(')[0].trim(),
          instruction: 'Free time - no specific duties assigned',
          priority: 'low'
        });
      }
    });

    return timeline.filter(item => item !== null);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center space-x-3">
              <div className="bg-blue-600 rounded-lg p-2">
                <Calendar className="h-6 w-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Substitute Manager</h1>
                <p className="text-sm text-gray-600">School timetable and duty management</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="text-sm text-gray-600">
                Data Sources: <span className="text-green-600">✓ Duty Roster</span> <span className="text-green-600">✓ RFF Roster</span> <span className="text-green-600">✓ Payback List</span>
              </div>
              <button className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                <Upload className="h-4 w-4" />
                <span>Update Data</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          
          {/* Left Panel - Teacher Search & Date Selection */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow-sm border p-6 space-y-6">
              <div>
                <h2 className="text-lg font-semibold text-gray-900 mb-4">Absent Teacher</h2>
                
                {/* Date Selection */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Date
                  </label>
                  <input
                    type="date"
                    value={selectedDate}
                    onChange={(e) => setSelectedDate(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>

                {/* Teacher Search */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Teacher Name
                  </label>
                  <div className="relative">
                    <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <input
                      type="text"
                      placeholder="Search by name or class..."
                      value={selectedTeacher}
                      onChange={handleSearchInput}
                      onFocus={() => setShowDropdown(searchResults.length > 0)}
                      className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                    
                    {/* Dropdown for search results */}
                    {showDropdown && searchResults.length > 0 && (
                      <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg">
                        {searchResults.map(teacher => (
                          <button
                            key={teacher.id}
                            onClick={() => handleTeacherSearch(teacher.name)}
                            className="w-full text-left px-4 py-2 hover:bg-blue-50 hover:text-blue-700 transition-colors border-b border-gray-100 last:border-b-0"
                          >
                            <div className="font-medium">{teacher.name}</div>
                            <div className="text-sm text-gray-500">Class: {teacher.class}</div>
                          </button>
                        ))}
                      </div>
                    )}
                  </div>
                </div>

                {/* Quick Select Teachers */}
                <div className="space-y-2">
                  <p className="text-sm font-medium text-gray-700">Quick Select:</p>
                  <div className="grid grid-cols-1 gap-2">
                    {sampleData.teachers.map(teacher => (
                      <button
                        key={teacher.id}
                        onClick={() => handleTeacherSearch(teacher.name)}
                        className="text-left px-3 py-2 text-sm bg-gray-50 hover:bg-blue-50 hover:text-blue-700 rounded-md transition-colors"
                      >
                        {teacher.name} ({teacher.class})
                      </button>
                    ))}
                  </div>
                </div>

                <button
                  onClick={generateSchedule}
                  disabled={!selectedTeacher}
                  className="w-full mt-6 px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors font-medium"
                >
                  Generate Substitute Schedule
                </button>
              </div>
            </div>

            {/* Quick Stats */}
            <div className="mt-6 bg-white rounded-lg shadow-sm border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Today's Overview</h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Users className="h-4 w-4 text-blue-600" />
                    <span className="text-sm text-gray-600">Total Teachers</span>
                  </div>
                  <span className="font-semibold">{sampleData.teachers.length}</span>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Clock className="h-4 w-4 text-green-600" />
                    <span className="text-sm text-gray-600">RFF Slots</span>
                  </div>
                  <span className="font-semibold">{sampleData.rffSlots.length}</span>
                </div>
              </div>
            </div>
          </div>

          {/* Right Panel - Schedule Display */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow-sm border p-6">
              {selectedTeacher ? (
                <div>
                  <div className="flex items-center justify-between mb-6">
                    <h2 className="text-xl font-semibold text-gray-900">
                      Substitute Schedule for {selectedTeacher}
                    </h2>
                    <div className="text-sm text-gray-600">
                      {new Date(selectedDate).toLocaleDateString('en-AU', {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </div>
                  </div>

                  {/* Schedule will be generated here */}
                  <div className="space-y-4">
                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                      <div className="flex items-center space-x-2">
                        <div className="bg-yellow-400 w-3 h-3 rounded-full"></div>
                        <h3 className="font-semibold text-yellow-800">Schedule Generation</h3>
                      </div>
                      <p className="text-yellow-700 mt-2">
                        Click "Generate Substitute Schedule" to create the detailed schedule.
                        This will include:
                      </p>
                      <ul className="list-disc list-inside text-yellow-700 mt-2 space-y-1 text-sm">
                        <li>Regular duties assigned to {selectedTeacher}</li>
                        <li>RFF periods and class coverage</li>
                        <li>RFF payback priorities</li>
                        <li>Complete daily timeline</li>
                      </ul>
                    </div>

                    {/* Preview of what the schedule will look like */}
                    <div className="border-2 border-dashed border-gray-200 rounded-lg p-8 text-center text-gray-500">
                      <Calendar className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                      <p className="text-lg font-medium mb-2">Schedule Preview</p>
                      <p className="text-sm">
                        Detailed substitute schedule will appear here after generation
                      </p>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center py-12">
                  <Search className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">
                    Select a Teacher to Begin
                  </h3>
                  <p className="text-gray-600">
                    Choose an absent teacher from the search panel to generate their substitute schedule
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} -->
